#version 450

layout (local_size_x = 8, local_size_y = 8) in;

layout (rgba32f, binding = 0) uniform image2D result_img;

/*
#define BVH_NODES_COUNT 16
#define VERTICES_COUNT 32
#define TRIANGLES_COUNT 16
#define OBJECTS_COUNT 2
#define MATERIALS_COUNT 2
#define LIGHTS_COUNT 2
*/

#define BVH_NODES_COUNT 131072
#define VERTICES_COUNT 131072
#define TRIANGLES_COUNT 131072
#define OBJECTS_COUNT 1024
#define MATERIALS_COUNT 1024
#define LIGHTS_COUNT 1024

struct Ray {
    vec3 origin;
    vec3 direction;
    float t_min;
};

struct Bbox {
    vec4 p_min;
    vec4 p_max;
};

struct BvhNode {
    int lc_ind;
    int rc_ind;
    int prim_start;
    int prim_end;
    Bbox bbox;
};

struct Vertex {
    vec4 position;
    vec4 normal;
};

struct Triangle {
    ivec4 indices;
    int material_index;
    int object_index;
    vec2 _pad;
};

struct SceneObject {
    mat4 model;
    mat4 model_iv;
};

struct Material {
    vec4 albedo_ior;
    float roughness;
    float metallic;
    int is_translucent;
    float _pad;
};

struct Light {
    vec4 pos_or_dir;
    vec4 strength;
};

struct Camera {
    vec4 eye;
    vec4 forward;
    vec4 up;
    vec4 right;
    float fov;
    float half_cot_half_fov;
    vec2 _pad;
};

struct Intersection {
    vec3 normal;
    float t;
    int material_index;
};

struct Coordinate {
    mat3 local_to_world;
    mat3 world_to_local;
    vec3 hemisphere;
};

layout(std430, binding = 1) buffer SceneUniform {
    BvhNode bvh_nodes[BVH_NODES_COUNT];
    Vertex vertices[VERTICES_COUNT];
    Triangle triangles[TRIANGLES_COUNT];
    layout (column_major) SceneObject objects[OBJECTS_COUNT];
    Material materials[MATERIALS_COUNT];
    Light lights[LIGHTS_COUNT];
    int lights_count;
    int max_depth;
    vec2 _su_pad;
};

layout(std140, binding = 2) uniform VariableUniform {
    Camera camera;
    int curr_light_index;
    vec3 _vu_pad;
};

uint seed;
uint rand_hash(uint s) {
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}
float random() {
    seed = rand_hash(seed);
    return float(seed) / 4294967295.0;
}

Ray generate_ray(float u, float v) {
    Ray r;
    r.origin = camera.eye.xyz;
    r.direction = normalize(camera.forward.xyz * camera.half_cot_half_fov + camera.right.xyz * u + camera.up.xyz * v);
    r.t_min = 0.0001;
    return r;
}

Coordinate coord_from_z(vec3 z_world, vec3 hemisphere) {
    float sign_ = sign(z_world.z);
    if (z_world.z == 0.0) {
        sign_ = 1.0;
    }
    float a = -1.0 / (sign_ + z_world.z);
    float b = z_world.x * z_world.y * a;
    vec3 x_world = vec3(1.0 + sign_ * z_world.x * z_world.x * a, sign_ * b, -sign_ * z_world.x);
    vec3 y_world = vec3(b, sign_ + z_world.y * z_world.y * a, -z_world.y);

    /*
    vec3 y_world = abs(z_world.y) < 0.99 ? vec3(0, 1, 0) : vec3(1, 0, 0);
    vec3 x_world = normalize(cross(y_world, z_world));
    y_world = cross(z_world, x_world);
    */

    mat3 local_to_world = mat3(x_world, y_world, z_world);
    mat3 world_to_local = transpose(local_to_world);

    Coordinate coord;
    coord.local_to_world = local_to_world;
    coord.world_to_local = world_to_local;
    coord.hemisphere = hemisphere;
    return coord;
}

bool intersect_bbox(Ray ray, Bbox bbox, float t_max) {
    if (bbox.p_min.x > bbox.p_max.x || bbox.p_min.y > bbox.p_max.y || bbox.p_min.z > bbox.p_max.z) {
        return false;
    }

    float x0 = (bbox.p_min.x - ray.origin.x) / ray.direction.x;
    float x1 = (bbox.p_max.x - ray.origin.x) / ray.direction.x;
    if (x0 > x1) {
        float t = x1;
        x1 = x0;
        x0 = t;
    }
    float y0 = (bbox.p_min.y - ray.origin.y) / ray.direction.y;
    float y1 = (bbox.p_max.y - ray.origin.y) / ray.direction.y;
    if (y0 > y1) {
        float t = y1;
        y1 = y0;
        y0 = t;
    }
    float z0 = (bbox.p_min.z - ray.origin.z) / ray.direction.z;
    float z1 = (bbox.p_max.z - ray.origin.z) / ray.direction.z;
    if (z0 > z1) {
        float t = z1;
        z1 = z0;
        z0 = t;
    }

    float t0 = max(x0, max(y0, z0));
    float t1 = min(x1, min(y1, z1));

    return t0 <= t1 && t1 > ray.t_min && t0 < t_max;
}

bool intersect_triangle(Ray ray, Triangle tri, inout Intersection inter) {
    mat4 model = objects[tri.object_index].model;
    mat3 model_iv = mat3(objects[tri.object_index].model_iv);

    Vertex v0 = vertices[tri.indices[0]];
    Vertex v1 = vertices[tri.indices[1]];
    Vertex v2 = vertices[tri.indices[2]];

    vec3 p0 = (model * vec4(v0.position.xyz, 1.0)).xyz;
    vec3 p1 = (model * vec4(v1.position.xyz, 1.0)).xyz;
    vec3 p2 = (model * vec4(v2.position.xyz, 1.0)).xyz;

    vec3 e1 = p1 - p0;
    vec3 e2 = p2 - p0;
    vec3 q = cross(ray.direction, e2);
    float det = dot(e1, q);
    if (det != 0.0) {
        det = 1.0 / det;
        vec3 s = ray.origin - p0;
        float v = dot(s, q) * det;
        if (v >= 0.0) {
            vec3 r = cross(s, e1);
            float w = dot(ray.direction, r) * det;
            float u = 1.0 - v - w;
            if (w >= 0.0 && u >= 0.0) {
                float t = dot(e2, r) * det;
                if (t > ray.t_min && t < inter.t) {
                    inter.t = t;
                    inter.normal = model_iv * normalize(v0.normal.xyz * u + v1.normal.xyz * v + v2.normal.xyz * w);
                    inter.material_index = tri.material_index;
                    return true;
                }
            }
        }
    }

    return false;
}

bool intersect_bvh(Ray ray, inout Intersection inter) {
    int stack[64];
    int stack_top = 0;

    bool result = false;

    stack[stack_top++] = 0;
    while (stack_top > 0) {
        int u = stack[--stack_top];

        if (!intersect_bbox(ray, bvh_nodes[u].bbox, inter.t)) {
            continue;
        }

        int lc = bvh_nodes[u].lc_ind;
        int rc = bvh_nodes[u].rc_ind;
        if (lc == -1) { // leaf
            for (int i = bvh_nodes[u].prim_start; i < bvh_nodes[u].prim_end; i++) {
                if (intersect_triangle(ray, triangles[i], inter)) {
                    result = true;
                }
            }
        } else {
            stack[stack_top++] = lc;
            stack[stack_top++] = rc;
        }
    }

    return result;
}

bool intersect_triangle_test(Ray ray, Triangle tri, float t_max) {
    mat4 model = objects[tri.object_index].model;

    Vertex v0 = vertices[tri.indices[0]];
    Vertex v1 = vertices[tri.indices[1]];
    Vertex v2 = vertices[tri.indices[2]];

    vec3 p0 = (model * vec4(v0.position.xyz, 1.0)).xyz;
    vec3 p1 = (model * vec4(v1.position.xyz, 1.0)).xyz;
    vec3 p2 = (model * vec4(v2.position.xyz, 1.0)).xyz;

    vec3 e1 = p1 - p0;
    vec3 e2 = p2 - p0;
    vec3 q = cross(ray.direction, e2);
    float det = dot(e1, q);
    if (det != 0.0) {
        det = 1.0 / det;
        vec3 s = ray.origin - p0;
        float v = dot(s, q) * det;
        if (v >= 0.0) {
            vec3 r = cross(s, e1);
            float w = dot(ray.direction, r) * det;
            float u = 1.0 - v - w;
            if (w >= 0.0 && u >= 0.0) {
                float t = dot(e2, r) * det;
                if (t > ray.t_min && t < t_max) {
                    return true;
                }
            }
        }
    }

    return false;
}

bool intersect_bvh_test(Ray ray, float t_max) {
    int stack[64];
    int stack_top = 0;

    stack[stack_top++] = 0;
    while (stack_top > 0) {
        int u = stack[--stack_top];

        if (!intersect_bbox(ray, bvh_nodes[u].bbox, t_max)) {
            continue;
        }

        int lc = bvh_nodes[u].lc_ind;
        int rc = bvh_nodes[u].rc_ind;
        if (lc == -1) { // leaf
            for (int i = bvh_nodes[u].prim_start; i < bvh_nodes[u].prim_end; i++) {
                if (intersect_triangle_test(ray, triangles[i], t_max)) {
                    return true;
                }
            }
        } else {
            stack[stack_top++] = lc;
            stack[stack_top++] = rc;
        }
    }

    return false;
}

void light_sample(Light light, vec3 pi, out vec3 wi, out float pdf, out vec3 strength, out float dist) {
    if (light.pos_or_dir.a == 1.0) { // point
        vec3 samp = light.pos_or_dir.xyz - pi;
        float dist_sqr = dot(samp, samp);
        float dist = sqrt(dist_sqr);
        wi = samp / dist;
        pdf = 1.0;
        strength = light.strength.rgb / dist_sqr;
        dist = dist;
    } else { // directional
        wi = -light.pos_or_dir.xyz;
        pdf = 1.0;
        strength = light.strength.rgb;
        dist = 1e9;
    }
}

#define PI 3.141592653589793238463
#define FRAC_1_PI 0.318309886183791

float color_luminance(vec3 color) {
    return 0.299 * color.r + 0.587 * color.g + 0.114 * color.b;
}

float pow2(float x) {
    return x * x;
}

float pow5(float x) {
    return x * x * x * x * x;
}

// vec3 reflect_n(vec3 i, vec3 n) {
//     return 2.0 * dot(i, n) * n - i;
// }

bool refract_n(vec3 i, vec3 n, float ior, out vec3 result) {
    float cos_i = dot(i, n);
    if (cos_i >= 0.0) {
        float ior_ratio = 1.0 / ior;
        float o_z_sqr = 1.0 - (1.0 - cos_i * cos_i) * ior_ratio * ior_ratio;
        if (o_z_sqr >= 0.0) {
            result = (ior_ratio * cos_i - sqrt(o_z_sqr)) * n - ior_ratio * i;
            return true;
        }
        return false;
    } else {
        float ior_ratio = ior;
        float o_z_sqr = 1.0 - (1.0 - cos_i * cos_i) * ior_ratio * ior_ratio;
        if (o_z_sqr >= 0.0) {
            result = (sqrt(o_z_sqr) + ior_ratio * cos_i) * n - ior_ratio * i;
            return true;
        }
        return false;
    }
}

float fresnel_n(float ior, vec3 i, vec3 n) {
    float i_ior = ior;
    float o_ior = 1.0;
    if (dot(i, n) >= 0.0) {
        i_ior = 1.0;
        o_ior = ior;
    }

    vec3 refract;
    if (refract_n(i, n, ior, refract)) {
        float idotn = abs(dot(i, n));
        float rdotn = abs(dot(refract, n));

        float denom = i_ior * idotn + o_ior * rdotn;
        float num = i_ior * idotn - o_ior * rdotn;
        float rs = num / denom;
        rs *= rs;

        denom = i_ior * rdotn + o_ior * idotn;
        num = i_ior * rdotn - o_ior * idotn;
        float rp = num / denom;
        rp *= rp;

        return (rs + rp) * 0.5;
    }

    return 1.0;
}

vec3 half_from_reflect(vec3 i, vec3 o) {
    return i.z >= 0.0 ? normalize(i + o) : -normalize(i + o);
}

vec3 half_from_refract(vec3 i, vec3 o, float ior) {
    vec3 half_v = i.z >= 0.0 ? normalize(i + ior * o) : normalize(ior * i + o);
    return half_v.z < 0.0 ? -half_v : half_v;
}

float ggx_ndf(float ndoth, float a2) {
    return a2 * FRAC_1_PI / max(pow2(ndoth * ndoth * (a2 - 1.0) + 1.0), 0.0001);
}

/// return sampled (n dot h)^2
float ggx_ndf_cdf_inverse(float a2, float rand) {
    return (1.0 - rand) / (1.0 - rand * (1.0 - a2));
}

float smith_separable_visible(float ndotv, float ndotl, float a2) {
    float v = abs(ndotv) + sqrt((1.0 - a2) * ndotv * ndotv + a2);
    float l = abs(ndotl) + sqrt((1.0 - a2) * ndotl * ndotl + a2);
    return 1.0 / (v * l);
}

void lambert_reflect_sample(Material mat, vec3 po, vec3 wo, vec3 pi, out vec3 wi, out float pdf, out vec3 bxdf) {
    float rand_x = random();
    float rand_y = random();
    float phi = 2.0 * PI * rand_x;
    float sin_theta_sqr = rand_y;
    float sin_theta = sqrt(sin_theta_sqr);
    float cos_theta = sqrt(1.0 - sin_theta_sqr);
    wi = vec3(sin_theta * cos(phi), sin_theta * sin(phi), cos_theta);
    if (wo.z < 0.0) {
        wi.z = -wi.z;
    }

    pdf = abs(wi.z) * FRAC_1_PI;
    bxdf = mat.albedo_ior.rgb * FRAC_1_PI;
}

float lambert_reflect_pdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    if (wi.z * wo.z >= 0.0) {
        return abs(wi.z) * FRAC_1_PI;
    } else {
        return 1.0;
    }
}

vec3 lambert_reflect_bxdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    if (wi.z * wo.z >= 0.0) {
        return mat.albedo_ior.rgb * FRAC_1_PI;
    } else {
        return vec3(0.0, 0.0, 0.0);
    }
}

void microfacet_reflect_sample(Material mat, vec3 po, vec3 wo, vec3 pi, out vec3 wi, out float pdf, out vec3 bxdf) {
    float rand_x = random();
    float rand_y = random();

    float a2 = mat.roughness * mat.roughness;
    float cos_theta_sqr = ggx_ndf_cdf_inverse(a2, rand_x);
    float cos_theta = sqrt(cos_theta_sqr);
    float sin_theta = sqrt(1.0 - cos_theta_sqr);
    float phi = 2.0 * PI * rand_y;
    vec3 half_v = vec3(sin_theta * cos(phi), sin_theta * sin(phi), cos_theta);

    wi = reflect(wo, half_v);
    if (wi.z * wo.z >= 0.0) {
        float ndf = ggx_ndf(half_v.z, a2);
        float visible = smith_separable_visible(abs(wo.z), abs(wi.z), a2);
        pdf = ndf * half_v.z / (4.0 * abs(dot(wo, half_v)));
        bxdf = mat.albedo_ior.rgb * ndf * visible;
    } else {
        pdf = 1.0;
        bxdf = vec3(0.0, 0.0, 0.0);
    }
}

float microfacet_reflect_pdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    if (wi.z * wo.z >= 0.0) {
        vec3 half_v = half_from_reflect(wo, wi);
        float ndf = ggx_ndf(half_v.z, mat.roughness * mat.roughness);
        return ndf * half_v.z / (4.0 * abs(dot(wo, half_v)));
    } else {
        return 1.0;
    }
}

vec3 microfacet_reflect_bxdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    if (wi.z * wo.z >= 0.0) {
        vec3 half_v = half_from_reflect(wo, wi);
        float a2 = mat.roughness * mat.roughness;
        float ndf = ggx_ndf(half_v.z, a2);
        float visible = smith_separable_visible(abs(wo.z), abs(wi.z), a2);
        return mat.albedo_ior.rgb * ndf * visible;
    } else {
        return vec3(0.0, 0.0, 0.0);
    }
}

void microfacet_transmit_sample(Material mat, vec3 po, vec3 wo, vec3 pi, out vec3 wi, out float pdf, out vec3 bxdf) {
    float rand_x = random();
    float rand_y = random();

    float a2 = mat.roughness * mat.roughness;
    float cos_theta_sqr = ggx_ndf_cdf_inverse(a2, rand_x);
    float cos_theta = sqrt(cos_theta_sqr);
    float sin_theta = sqrt(1.0 - cos_theta_sqr);
    float phi = 2.0 * PI * rand_y;
    vec3 half_v = vec3(sin_theta * cos(phi), sin_theta * sin(phi), cos_theta);

    if (refract_n(wo, half_v, mat.albedo_ior.a, wi)) {
        if (wi.z * wo.z <= 0.0) {
            float ndf = ggx_ndf(half_v.z, a2);
            float visible = smith_separable_visible(abs(wo.z), abs(wi.z), a2);
            
            float ior_ratio = wo.z >= 0.0 ? 1.0 / mat.albedo_ior.a : mat.albedo_ior.a;
            float denom = ior_ratio * dot(wo, half_v) + dot(wi, half_v);
            denom *= denom;
            float num = 4.0 * abs(dot(wo, half_v)) * abs(dot(wi, half_v));
            bxdf = mat.albedo_ior.rgb * ndf * visible * num / denom;

            num = abs(dot(wi, half_v));
            pdf = ndf * half_v.z * num / denom;
        } else {
            pdf = 1.0;
            bxdf = vec3(0.0, 0.0, 0.0);
        }
    } else {
        pdf = 1.0;
        bxdf = vec3(0.0, 0.0, 0.0);
    }
}

float microfacet_transmit_pdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    if (wi.z * wo.z >= 0.0) {
        vec3 half_v = half_from_refract(wo, wi, mat.albedo_ior.a);
        float ior_ratio = wo.z >= 0.0 ? 1.0 / mat.albedo_ior.a : mat.albedo_ior.a;
        float denom = ior_ratio * dot(wo, half_v) + dot(wi, half_v);
        denom *= denom;
        float num = abs(dot(wi, half_v));
        float ndf = ggx_ndf(half_v.z, mat.roughness * mat.roughness);
        return ndf * half_v.z * num / denom;
    } else {
        return 1.0;
    }
}

vec3 microfacet_transmit_bxdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    if (wi.z * wo.z >= 0.0) {
        vec3 half_v = half_from_reflect(wo, wi);
        float a2 = mat.roughness * mat.roughness;
        float ndf = ggx_ndf(half_v.z, a2);
        float visible = smith_separable_visible(abs(wo.z), abs(wi.z), a2);
        float ior_ratio = wo.z >= 0.0 ? 1.0 / mat.albedo_ior.a : mat.albedo_ior.a;
        float denom = ior_ratio * dot(wo, half_v) + dot(wi, half_v);
        denom *= denom;
        float num = 4.0 * abs(dot(wo, half_v)) * abs(dot(wi, half_v));
        return mat.albedo_ior.rgb * ndf * visible * num / denom;
    } else {
        return vec3(0.0, 0.0, 0.0);
    }
}

void mat_sample(Material mat, vec3 po, vec3 wo, vec3 pi, out vec3 wi, out float pdf, out vec3 bxdf) {
    float fresnel = fresnel_n(mat.albedo_ior.a, wo, vec3(0.0, 0.0, 1.0));
    float rand = random();
    if (rand <= fresnel) {
        microfacet_reflect_sample(mat, po, wo, pi, wi, pdf, bxdf);
        pdf *= fresnel;
        bxdf *= fresnel;
    } else if (mat.is_translucent == 0) {
        lambert_reflect_sample(mat, po, wo, pi, wi, pdf, bxdf);
        pdf *= 1.0 - fresnel;
        bxdf *= 1.0 - fresnel;
    } else {
        microfacet_transmit_sample(mat, po, wo, pi, wi, pdf, bxdf);
        pdf *= 1.0 - fresnel;
        bxdf *= 1.0 - fresnel;
    }
}

float mat_pdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    float fresnel = fresnel_n(mat.albedo_ior.a, wo, vec3(0.0, 0.0, 1.0));
    float reflect_pdf = microfacet_reflect_pdf(mat, po, wo, pi, wi);
    if (mat.is_translucent == 0) {
        float transmit_pdf = lambert_reflect_pdf(mat, po, wo, pi, wi);
        return fresnel * reflect_pdf + (1.0 - fresnel) * transmit_pdf;
    } else if (wo.z * wi.z >= 0.0) {
        return fresnel * reflect_pdf;
    } else {
        return (1.0 - fresnel) * microfacet_transmit_pdf(mat, po, wo, pi, wi);
    }
}

vec3 mat_bxdf(Material mat, vec3 po, vec3 wo, vec3 pi, vec3 wi) {
    float fresnel = fresnel_n(mat.albedo_ior.a, wo, vec3(0.0, 0.0, 1.0));
    vec3 reflect_bxdf = microfacet_reflect_bxdf(mat, po, wo, pi, wi);
    if (mat.is_translucent == 0) {
        vec3 transmit_bxdf = lambert_reflect_bxdf(mat, po, wo, pi, wi);
        return fresnel * reflect_bxdf + (1.0 - fresnel) * transmit_bxdf;
    } else if (wo.z * wi.z >= 0.0) {
        return fresnel * reflect_bxdf;
    } else {
        return (1.0 - fresnel) * microfacet_transmit_bxdf(mat, po, wo, pi, wi);
    }
}

vec3 trace(Ray ray) {
    vec3 final_color = vec3(0.0, 0.0, 0.0);
    vec3 color_coe = vec3(1.0, 1.0, 1.0);

    for (int curr_depth = 0; curr_depth < max_depth; curr_depth++) {
        Intersection inter;
        inter.t = 1e9;
        if (!intersect_bvh(ray, inter)) {
            if (curr_depth == 0) {
                final_color = vec3(0.1, 0.1, 0.1);
            }
            break;
        }

        vec3 po = ray.origin + ray.direction * inter.t;
        Material mat = materials[inter.material_index];

        Coordinate coord =
            coord_from_z(inter.normal, dot(ray.direction, inter.normal) > 0.0 ? -inter.normal : inter.normal);
        vec3 wo = coord.world_to_local * -ray.direction;

        vec3 pi = po;

        vec3 li = vec3(0.0, 0.0, 0.0);
        if (lights_count > 0) {
            vec3 light_dir;
            float pdf;
            vec3 light_strength;
            float dist;
            light_sample(lights[curr_light_index], pi, light_dir, pdf, light_strength, dist);
            vec3 wi = coord.world_to_local * light_dir;

            vec3 bxdf = mat_bxdf(mat, po, wo, pi, wi);

            Ray shadow_ray;
            shadow_ray.origin = pi;
            shadow_ray.direction = light_dir;
            shadow_ray.t_min = 0.0001;
            if (pdf > 0.0 && !intersect_bvh_test(shadow_ray, dist)) {
                li = light_strength * bxdf * wi.z / max(pdf, 0.0001);
            }
        }
        final_color += color_coe * li * lights_count;

        vec3 wi;
        float pdf;
        vec3 bxdf;
        mat_sample(mat, po, wo, pi, wi, pdf, bxdf);
        vec3 wi_world = coord.local_to_world * wi;
        ray.origin = pi;
        ray.direction = wi_world;
        color_coe *= bxdf * abs(wi.z) / max(pdf, 0.0001);

        float color_coe_lum = color_luminance(color_coe);
        if (color_coe_lum < 0.001) {
            break;
        }

        float rr_rand = random();
        float rr_prop = min(color_coe_lum, 1.0);
        if (rr_rand > rr_prop) {
            break;
        }

        color_coe /= rr_prop;
    }

    return final_color;
}

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 result_dim = imageSize(result_img);
    seed = pixel_coords.x + pixel_coords.y * result_dim.x;

    float u = (pixel_coords.x + 0.5) / result_dim.x;
    float v = (pixel_coords.y + 0.5) / result_dim.y;

    Ray ray = generate_ray((u - 0.5) * result_dim.x / result_dim.y, 0.5 - v);
    vec3 result = trace(ray);

    imageStore(result_img, pixel_coords, vec4(result, 1.0));
}